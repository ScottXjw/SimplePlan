import type { App, Plugin } from 'vue';
import { version } from '../package.json';
import Column from './components/Column.vue';
import ColumnGroup from './components/ColumnGroup.vue';
import { setConfig } from './components/config';
import type { CellRenderArgs, ColumnGroupType, ColumnsType, ColumnType, ContextmenuPopupArg, Position, SurelyTableProps, TableExposeType, TablePaginationConfig } from './components/interface';
import SummaryCell from './components/Summary/Cell.vue';
import SummaryRow from './components/Summary/Row.vue';
import Summary from './components/Summary/Summary.vue';
import STable from './components/Table';
import { SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE } from './hooks/useRowSelection';
import { setLicenseKey } from './license/licenseInfo';
export type { RowHeight } from './components/interface';
export type { SurelyTableProps, SurelyTableProps as STableProps, TablePaginationConfig as STablePaginationConfig, ColumnGroupType as STableColumnGroupType, ColumnType as STableColumnType, ColumnType as STableColumnProps, ColumnsType as STableColumnsType, Position as ScrollPosition, CellRenderArgs, ContextmenuPopupArg, TableExposeType as STableExposeType, };
export { STable, Column as STableColumn, ColumnGroup as STableColumnGroup, Summary as STableSummary, SummaryRow as STableSummaryRow, SummaryCell as STableSummaryCell, SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE, setLicenseKey, install, version, setConfig, };
declare const install: (app: App) => App<any>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            size?: "middle" | "small" | "default";
            expandedRowRender?: import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>;
            expandIcon?: import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>;
            ignoreCellKey?: boolean;
            showHeaderScrollbar?: boolean;
            columnDrag?: boolean;
            animateRows?: boolean;
            dropdownPrefixCls?: string;
            columns?: ColumnsType<import("./components/interface").DefaultRecordType>;
            dataSource?: import("./components/interface").DefaultRecordType[];
            virtual?: boolean;
            xVirtual?: boolean;
            rowHeight?: import("./components/interface").RowHeight;
            autoHeaderHeight?: boolean;
            bordered?: boolean;
            wrapText?: boolean;
            loading?: boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: StringConstructor;
                spinning: {
                    type: BooleanConstructor;
                    default: any;
                };
                size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                wrapperClassName: StringConstructor;
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: NumberConstructor;
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>;
            pagination?: {};
            direction?: "rtl";
            stripe?: boolean;
            rowClassName?: string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>;
            sticky?: boolean | import("./components/interface").HeaderSticky;
            selectedRowKeys?: import("./components/interface").Key[];
            expandFixed?: import("./components/interface").FixedType;
            expandColumnWidth?: number;
            expandedRowKeys?: import("./components/interface").Key[];
            defaultExpandedRowKeys?: import("./components/interface").Key[];
            expandRowByClick?: boolean;
            onExpand?: (expanded: boolean, record: import("./components/interface").DefaultRecordType) => void;
            onExpandedRowsChange?: (expandedKeys: import("./components/interface").Key[]) => void;
            defaultExpandAllRows?: boolean;
            childrenColumnName?: string;
            rowExpandable?: (record: import("./components/interface").DefaultRecordType) => boolean;
            rowSelection?: any;
            rowHoverDelay?: number;
            customRow?: (data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                style?: import("vue").CSSProperties;
            };
            customCell?: (obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            }) => Record<string, any>;
            customHeaderCell?: (column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>;
            customSummaryCellProps?: (obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                columnIndex: number;
            }) => Record<string, any>;
            showHeader?: boolean;
            showSorterTooltip?: boolean;
            locale?: import("./components/interface").TableLocale;
            scroll?: {
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            };
            rangeSelection?: boolean | "single";
            copyDelimiter?: string;
            summaryFixed?: import("./components/interface").SummaryFixed;
            hasContextmenuPopup?: boolean;
            onResizeColumn?: (w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void;
            onRowDragEnd?: (opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>;
            onColumnDragEnd?: (opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>;
            readonly prefixCls?: string;
            readonly title?: Function;
            readonly getPopupContainer?: import("./components/interface").GetPopupContainer;
            onKeydown?: (...args: any[]) => any;
            readonly footer?: Function;
            readonly headerHeight?: import("./components/interface").HeaderHeight;
            readonly height?: string | number;
            readonly maxHeight?: string | number;
            readonly indentSize?: number;
            readonly expandIconColumnIndex?: number;
            readonly rowKey?: string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>;
            readonly scrollX?: string | number;
            readonly rowDrag?: boolean;
            readonly onChange?: (pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void;
            readonly formatRangeCellText?: (params: import("./hooks/RangeInterface").FormatRangeCellTextParams) => string;
            readonly 'onUpdate:selectedRowKeys'?: (selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void;
            readonly onScroll?: (e: UIEvent) => void;
            readonly 'onUpdate:expandedRowKeys'?: (info: import("./components/interface").Key[]) => void;
            readonly 'onUpdate:pagination'?: (info: TablePaginationConfig) => void;
            readonly 'onUpdate:dataSource'?: (dataSource: import("./components/interface").DefaultRecordType[]) => void;
            ref?: import("vue").VNodeRef;
            class?: unknown;
            key?: string | number | symbol;
            ref_for?: boolean;
            ref_key?: string;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[];
            style?: unknown;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            emptyText?: any;
            headerCell?: import("vue").Slot<{
                title: any;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            }>;
            bodyCell?: import("vue").Slot<CellRenderArgs>;
            title?: any;
            footer?: any;
            summary?: any;
            expandedRowRender?: import("vue").Slot<{
                record: import("./components/interface").DefaultRecordType;
                index: number;
                indent: number;
                expanded: boolean;
            }>;
            customFilterDropdown?: any;
            customFilterIcon?: any;
            tooltipTitle?: import("vue").Slot<CellRenderArgs>;
            rowDragGhost?: import("vue").Slot<import("./components/interface").RowDragGhostArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>>;
            columnDragGhost?: import("vue").Slot<import("./components/interface").ColumnDragGhostArg<ColumnType<import("./components/interface").DefaultRecordType>>>;
            contextmenuPopup?: import("vue").Slot<ContextmenuPopupArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>>;
            menuPopup?: import("vue").Slot<import("./components/interface").MenuPopupArg<ColumnType<import("./components/interface").DefaultRecordType>>>;
            menuIcon?: import("vue").Slot<{
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                filtered: boolean;
            }>;
            expandIcon?: any;
            cellEditor?: import("vue").Slot<import("./components/interface").CellEditorArgs>;
            default?: any;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $emit: (event: "keydown", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            title: FunctionConstructor;
            footer: FunctionConstructor;
            ignoreCellKey: BooleanConstructor;
            showHeaderScrollbar: BooleanConstructor;
            prefixCls: StringConstructor;
            columnDrag: {
                type: BooleanConstructor;
                default: boolean;
            };
            animateRows: {
                type: BooleanConstructor;
                default: any;
            };
            dropdownPrefixCls: {
                type: StringConstructor;
                default: string;
            };
            columns: {
                type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
                default: ColumnsType<import("./components/interface").DefaultRecordType>;
            };
            dataSource: {
                type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
                default: () => import("./components/interface").DefaultRecordType[];
            };
            virtual: {
                type: BooleanConstructor;
                default: any;
            };
            xVirtual: {
                type: BooleanConstructor;
                default: any;
            };
            rowHeight: {
                type: import("vue").PropType<import("./components/interface").RowHeight>;
                default: any;
            };
            autoHeaderHeight: {
                type: BooleanConstructor;
                default: boolean;
            };
            headerHeight: {
                type: import("vue").PropType<import("./components/interface").HeaderHeight>;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
            };
            maxHeight: {
                type: (StringConstructor | NumberConstructor)[];
            };
            size: {
                type: import("vue").PropType<"middle" | "small" | "default">;
                default: string;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            wrapText: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: StringConstructor;
                    spinning: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                    wrapperClassName: StringConstructor;
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: NumberConstructor;
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>>;
                default: boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: StringConstructor;
                    spinning: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                    wrapperClassName: StringConstructor;
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: NumberConstructor;
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>;
            };
            pagination: {
                type: import("vue").PropType<false | TablePaginationConfig>;
                default: () => {};
            };
            direction: {
                type: import("vue").PropType<"rtl">;
                default: any;
            };
            stripe: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowClassName: {
                type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            sticky: {
                type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
                default: boolean | import("./components/interface").HeaderSticky;
            };
            selectedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: any;
            };
            expandFixed: {
                type: import("vue").PropType<import("./components/interface").FixedType>;
                default: any;
            };
            expandColumnWidth: {
                type: NumberConstructor;
                default: any;
            };
            expandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            expandedRowRender: {
                type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            expandRowByClick: {
                type: BooleanConstructor;
                default: any;
            };
            expandIcon: {
                type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            onExpand: {
                type: import("vue").PropType<(expanded: boolean, record: import("./components/interface").DefaultRecordType) => void>;
                default: any;
            };
            onExpandedRowsChange: {
                type: import("vue").PropType<(expandedKeys: import("./components/interface").Key[]) => void>;
                default: any;
            };
            defaultExpandAllRows: {
                type: BooleanConstructor;
                default: any;
            };
            indentSize: NumberConstructor;
            expandIconColumnIndex: NumberConstructor;
            childrenColumnName: {
                type: StringConstructor;
                default: any;
            };
            rowExpandable: {
                type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
                default: () => boolean;
            };
            rowSelection: {
                type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            rowHoverDelay: {
                type: NumberConstructor;
                default: number;
            };
            rowKey: {
                type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
            };
            customRow: {
                type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                    style?: import("vue").CSSProperties;
                }>;
                default: () => {};
            };
            customCell: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customHeaderCell: {
                type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customSummaryCellProps: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                    columnIndex: number;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSorterTooltip: {
                type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                    title: import("vue-types").VueTypeValidableDef<any>;
                    trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
                    visible: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    defaultVisible: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
                    color: StringConstructor;
                    transitionName: StringConstructor;
                    overlayStyle: {
                        type: import("vue").PropType<import("vue").CSSProperties>;
                        default: import("vue").CSSProperties;
                    };
                    overlayClassName: StringConstructor;
                    openClassName: StringConstructor;
                    prefixCls: StringConstructor;
                    mouseEnterDelay: NumberConstructor;
                    mouseLeaveDelay: NumberConstructor;
                    getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
                    arrowPointAtCenter: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    autoAdjustOverflow: {
                        type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                        default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
                    };
                    destroyTooltipOnHide: {
                        type: BooleanConstructor;
                        default: any;
                    };
                    align: {
                        type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                        default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
                    };
                    builtinPlacements: {
                        type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                        default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
                    };
                    children: ArrayConstructor;
                    onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
                    'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
                }>>>;
                default: boolean;
            };
            getPopupContainer: {
                type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
            };
            locale: {
                type: import("vue").PropType<import("./components/interface").TableLocale>;
                default: import("./components/interface").TableLocale;
            };
            scrollX: {
                type: import("vue").PropType<string | number>;
            };
            scroll: {
                type: import("vue").PropType<{
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                }>;
                default: {
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                };
            };
            rangeSelection: {
                type: import("vue").PropType<boolean | "single">;
                default: string;
            };
            copyDelimiter: {
                type: StringConstructor;
                default: string;
            };
            rowDrag: {
                type: BooleanConstructor[];
            };
            onChange: {
                type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
            };
            summaryFixed: {
                type: import("vue").PropType<import("./components/interface").SummaryFixed>;
                default: boolean;
            };
            hasContextmenuPopup: BooleanConstructor;
            formatRangeCellText: {
                type: import("vue").PropType<(params: import("./hooks/RangeInterface").FormatRangeCellTextParams) => string>;
            };
            'onUpdate:selectedRowKeys': {
                type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
            };
            onScroll: {
                type: import("vue").PropType<(e: UIEvent) => void>;
            };
            'onUpdate:expandedRowKeys': {
                type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
            };
            onResizeColumn: {
                type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
                default: any;
            };
            onRowDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            onColumnDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            'onUpdate:pagination': {
                type: import("vue").PropType<(info: TablePaginationConfig) => void>;
            };
            'onUpdate:dataSource': {
                type: import("vue").PropType<(dataSource: import("./components/interface").DefaultRecordType[]) => void>;
            };
        }>> & {
            onKeydown?: (...args: any[]) => any;
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "keydown"[], string, {
            size: "middle" | "small" | "default";
            expandedRowRender: import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>;
            expandIcon: import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>;
            ignoreCellKey: boolean;
            showHeaderScrollbar: boolean;
            columnDrag: boolean;
            animateRows: boolean;
            dropdownPrefixCls: string;
            columns: ColumnsType<import("./components/interface").DefaultRecordType>;
            dataSource: import("./components/interface").DefaultRecordType[];
            virtual: boolean;
            xVirtual: boolean;
            rowHeight: import("./components/interface").RowHeight;
            autoHeaderHeight: boolean;
            bordered: boolean;
            wrapText: boolean;
            loading: boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: StringConstructor;
                spinning: {
                    type: BooleanConstructor;
                    default: any;
                };
                size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                wrapperClassName: StringConstructor;
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: NumberConstructor;
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>;
            pagination: {};
            direction: "rtl";
            stripe: boolean;
            rowClassName: string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>;
            sticky: boolean | import("./components/interface").HeaderSticky;
            selectedRowKeys: import("./components/interface").Key[];
            expandFixed: import("./components/interface").FixedType;
            expandColumnWidth: number;
            expandedRowKeys: import("./components/interface").Key[];
            defaultExpandedRowKeys: import("./components/interface").Key[];
            expandRowByClick: boolean;
            onExpand: (expanded: boolean, record: import("./components/interface").DefaultRecordType) => void;
            onExpandedRowsChange: (expandedKeys: import("./components/interface").Key[]) => void;
            defaultExpandAllRows: boolean;
            childrenColumnName: string;
            rowExpandable: (record: import("./components/interface").DefaultRecordType) => boolean;
            rowSelection: any;
            rowHoverDelay: number;
            customRow: (data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                style?: import("vue").CSSProperties;
            };
            customCell: (obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            }) => Record<string, any>;
            customHeaderCell: (column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>;
            customSummaryCellProps: (obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                columnIndex: number;
            }) => Record<string, any>;
            showHeader: boolean;
            showSorterTooltip: boolean;
            locale: import("./components/interface").TableLocale;
            scroll: {
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            };
            rangeSelection: boolean | "single";
            copyDelimiter: string;
            summaryFixed: import("./components/interface").SummaryFixed;
            hasContextmenuPopup: boolean;
            onResizeColumn: (w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void;
            onRowDragEnd: (opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>;
            onColumnDragEnd: (opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>;
        }, {}, string, import("./utils/type").CustomSlotsType<{
            emptyText?: any;
            headerCell?: {
                title: any;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            };
            bodyCell?: CellRenderArgs;
            title?: any;
            footer?: any;
            summary?: any;
            expandedRowRender?: {
                record: import("./components/interface").DefaultRecordType;
                index: number;
                indent: number;
                expanded: boolean;
            };
            customFilterDropdown?: any;
            customFilterIcon?: any;
            tooltipTitle?: CellRenderArgs;
            rowDragGhost?: import("./components/interface").RowDragGhostArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>;
            columnDragGhost?: import("./components/interface").ColumnDragGhostArg<ColumnType<import("./components/interface").DefaultRecordType>>;
            contextmenuPopup?: ContextmenuPopupArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>;
            menuPopup?: import("./components/interface").MenuPopupArg<ColumnType<import("./components/interface").DefaultRecordType>>;
            menuIcon?: {
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                filtered: boolean;
            };
            expandIcon?: any;
            cellEditor?: import("./components/interface").CellEditorArgs;
            default?: any;
        }>> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        title: FunctionConstructor;
        footer: FunctionConstructor;
        ignoreCellKey: BooleanConstructor;
        showHeaderScrollbar: BooleanConstructor;
        prefixCls: StringConstructor;
        columnDrag: {
            type: BooleanConstructor;
            default: boolean;
        };
        animateRows: {
            type: BooleanConstructor;
            default: any;
        };
        dropdownPrefixCls: {
            type: StringConstructor;
            default: string;
        };
        columns: {
            type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
            default: ColumnsType<import("./components/interface").DefaultRecordType>;
        };
        dataSource: {
            type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
            default: () => import("./components/interface").DefaultRecordType[];
        };
        virtual: {
            type: BooleanConstructor;
            default: any;
        };
        xVirtual: {
            type: BooleanConstructor;
            default: any;
        };
        rowHeight: {
            type: import("vue").PropType<import("./components/interface").RowHeight>;
            default: any;
        };
        autoHeaderHeight: {
            type: BooleanConstructor;
            default: boolean;
        };
        headerHeight: {
            type: import("vue").PropType<import("./components/interface").HeaderHeight>;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
        };
        maxHeight: {
            type: (StringConstructor | NumberConstructor)[];
        };
        size: {
            type: import("vue").PropType<"middle" | "small" | "default">;
            default: string;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        wrapText: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: StringConstructor;
                spinning: {
                    type: BooleanConstructor;
                    default: any;
                };
                size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                wrapperClassName: StringConstructor;
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: NumberConstructor;
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>>;
            default: boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: StringConstructor;
                spinning: {
                    type: BooleanConstructor;
                    default: any;
                };
                size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
                wrapperClassName: StringConstructor;
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: NumberConstructor;
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>;
        };
        pagination: {
            type: import("vue").PropType<false | TablePaginationConfig>;
            default: () => {};
        };
        direction: {
            type: import("vue").PropType<"rtl">;
            default: any;
        };
        stripe: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowClassName: {
            type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        sticky: {
            type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
            default: boolean | import("./components/interface").HeaderSticky;
        };
        selectedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: any;
        };
        expandFixed: {
            type: import("vue").PropType<import("./components/interface").FixedType>;
            default: any;
        };
        expandColumnWidth: {
            type: NumberConstructor;
            default: any;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: import("./components/interface").Key[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: import("./components/interface").Key[];
        };
        expandedRowRender: {
            type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        expandRowByClick: {
            type: BooleanConstructor;
            default: any;
        };
        expandIcon: {
            type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        onExpand: {
            type: import("vue").PropType<(expanded: boolean, record: import("./components/interface").DefaultRecordType) => void>;
            default: any;
        };
        onExpandedRowsChange: {
            type: import("vue").PropType<(expandedKeys: import("./components/interface").Key[]) => void>;
            default: any;
        };
        defaultExpandAllRows: {
            type: BooleanConstructor;
            default: any;
        };
        indentSize: NumberConstructor;
        expandIconColumnIndex: NumberConstructor;
        childrenColumnName: {
            type: StringConstructor;
            default: any;
        };
        rowExpandable: {
            type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
            default: () => boolean;
        };
        rowSelection: {
            type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        rowHoverDelay: {
            type: NumberConstructor;
            default: number;
        };
        rowKey: {
            type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
        };
        customRow: {
            type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                style?: import("vue").CSSProperties;
            }>;
            default: () => {};
        };
        customCell: {
            type: import("vue").PropType<(obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            }) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        customHeaderCell: {
            type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        customSummaryCellProps: {
            type: import("vue").PropType<(obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                columnIndex: number;
            }) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        showSorterTooltip: {
            type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                title: import("vue-types").VueTypeValidableDef<any>;
                trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
                visible: {
                    type: BooleanConstructor;
                    default: any;
                };
                defaultVisible: {
                    type: BooleanConstructor;
                    default: any;
                };
                placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
                color: StringConstructor;
                transitionName: StringConstructor;
                overlayStyle: {
                    type: import("vue").PropType<import("vue").CSSProperties>;
                    default: import("vue").CSSProperties;
                };
                overlayClassName: StringConstructor;
                openClassName: StringConstructor;
                prefixCls: StringConstructor;
                mouseEnterDelay: NumberConstructor;
                mouseLeaveDelay: NumberConstructor;
                getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
                arrowPointAtCenter: {
                    type: BooleanConstructor;
                    default: any;
                };
                autoAdjustOverflow: {
                    type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                    default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
                };
                destroyTooltipOnHide: {
                    type: BooleanConstructor;
                    default: any;
                };
                align: {
                    type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                    default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
                };
                builtinPlacements: {
                    type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                    default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
                };
                children: ArrayConstructor;
                onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
                'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
            }>>>;
            default: boolean;
        };
        getPopupContainer: {
            type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
        };
        locale: {
            type: import("vue").PropType<import("./components/interface").TableLocale>;
            default: import("./components/interface").TableLocale;
        };
        scrollX: {
            type: import("vue").PropType<string | number>;
        };
        scroll: {
            type: import("vue").PropType<{
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            }>;
            default: {
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            };
        };
        rangeSelection: {
            type: import("vue").PropType<boolean | "single">;
            default: string;
        };
        copyDelimiter: {
            type: StringConstructor;
            default: string;
        };
        rowDrag: {
            type: BooleanConstructor[];
        };
        onChange: {
            type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
        };
        summaryFixed: {
            type: import("vue").PropType<import("./components/interface").SummaryFixed>;
            default: boolean;
        };
        hasContextmenuPopup: BooleanConstructor;
        formatRangeCellText: {
            type: import("vue").PropType<(params: import("./hooks/RangeInterface").FormatRangeCellTextParams) => string>;
        };
        'onUpdate:selectedRowKeys': {
            type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
        };
        onScroll: {
            type: import("vue").PropType<(e: UIEvent) => void>;
        };
        'onUpdate:expandedRowKeys': {
            type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
        };
        onResizeColumn: {
            type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
            default: any;
        };
        onRowDragEnd: {
            type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
            default: any;
        };
        onColumnDragEnd: {
            type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
            default: any;
        };
        'onUpdate:pagination': {
            type: import("vue").PropType<(info: TablePaginationConfig) => void>;
        };
        'onUpdate:dataSource': {
            type: import("vue").PropType<(dataSource: import("./components/interface").DefaultRecordType[]) => void>;
        };
    }>> & {
        onKeydown?: (...args: any[]) => any;
    } & import("vue").ShallowUnwrapRef<() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: FunctionConstructor;
    footer: FunctionConstructor;
    ignoreCellKey: BooleanConstructor;
    showHeaderScrollbar: BooleanConstructor;
    prefixCls: StringConstructor;
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
        default: ColumnsType<import("./components/interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
        default: () => import("./components/interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    xVirtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./components/interface").RowHeight>;
        default: any;
    };
    autoHeaderHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerHeight: {
        type: import("vue").PropType<import("./components/interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | TablePaginationConfig>;
        default: () => {};
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
        default: boolean | import("./components/interface").HeaderSticky;
    };
    selectedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./components/interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: import("./components/interface").Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: import("./components/interface").Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    onExpand: {
        type: import("vue").PropType<(expanded: boolean, record: import("./components/interface").DefaultRecordType) => void>;
        default: any;
    };
    onExpandedRowsChange: {
        type: import("vue").PropType<(expandedKeys: import("./components/interface").Key[]) => void>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./components/interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./components/interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./components/interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./components/interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: {
                type: BooleanConstructor;
                default: any;
            };
            placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
            color: StringConstructor;
            transitionName: StringConstructor;
            overlayStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: import("vue").CSSProperties;
            };
            overlayClassName: StringConstructor;
            openClassName: StringConstructor;
            prefixCls: StringConstructor;
            mouseEnterDelay: NumberConstructor;
            mouseLeaveDelay: NumberConstructor;
            getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
            arrowPointAtCenter: {
                type: BooleanConstructor;
                default: any;
            };
            autoAdjustOverflow: {
                type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
            };
            destroyTooltipOnHide: {
                type: BooleanConstructor;
                default: any;
            };
            align: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
            };
            builtinPlacements: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
            };
            children: ArrayConstructor;
            onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
            'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
        }>>>;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./components/interface").TableLocale>;
        default: import("./components/interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rangeSelection: {
        type: import("vue").PropType<boolean | "single">;
        default: string;
    };
    copyDelimiter: {
        type: StringConstructor;
        default: string;
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: import("vue").PropType<import("./components/interface").SummaryFixed>;
        default: boolean;
    };
    hasContextmenuPopup: BooleanConstructor;
    formatRangeCellText: {
        type: import("vue").PropType<(params: import("./hooks/RangeInterface").FormatRangeCellTextParams) => string>;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: TablePaginationConfig) => void>;
    };
    'onUpdate:dataSource': {
        type: import("vue").PropType<(dataSource: import("./components/interface").DefaultRecordType[]) => void>;
    };
}>> & {
    onKeydown?: (...args: any[]) => any;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "keydown"[], "keydown", {
    size: "middle" | "small" | "default";
    expandedRowRender: import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>;
    expandIcon: import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>;
    ignoreCellKey: boolean;
    showHeaderScrollbar: boolean;
    columnDrag: boolean;
    animateRows: boolean;
    dropdownPrefixCls: string;
    columns: ColumnsType<import("./components/interface").DefaultRecordType>;
    dataSource: import("./components/interface").DefaultRecordType[];
    virtual: boolean;
    xVirtual: boolean;
    rowHeight: import("./components/interface").RowHeight;
    autoHeaderHeight: boolean;
    bordered: boolean;
    wrapText: boolean;
    loading: boolean | Partial<import("vue").ExtractPropTypes<{
        prefixCls: StringConstructor;
        spinning: {
            type: BooleanConstructor;
            default: any;
        };
        size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
        wrapperClassName: StringConstructor;
        tip: import("vue-types").VueTypeValidableDef<any>;
        delay: NumberConstructor;
        indicator: import("vue-types").VueTypeValidableDef<any>;
    }>>;
    pagination: {};
    direction: "rtl";
    stripe: boolean;
    rowClassName: string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>;
    sticky: boolean | import("./components/interface").HeaderSticky;
    selectedRowKeys: import("./components/interface").Key[];
    expandFixed: import("./components/interface").FixedType;
    expandColumnWidth: number;
    expandedRowKeys: import("./components/interface").Key[];
    defaultExpandedRowKeys: import("./components/interface").Key[];
    expandRowByClick: boolean;
    onExpand: (expanded: boolean, record: import("./components/interface").DefaultRecordType) => void;
    onExpandedRowsChange: (expandedKeys: import("./components/interface").Key[]) => void;
    defaultExpandAllRows: boolean;
    childrenColumnName: string;
    rowExpandable: (record: import("./components/interface").DefaultRecordType) => boolean;
    rowSelection: any;
    rowHoverDelay: number;
    customRow: (data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
        style?: import("vue").CSSProperties;
    };
    customCell: (obj: {
        record: import("./components/interface").DefaultRecordType;
        rowIndex: number;
        column: ColumnType<import("./components/interface").DefaultRecordType>;
    }) => Record<string, any>;
    customHeaderCell: (column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>;
    customSummaryCellProps: (obj: {
        record: import("./components/interface").DefaultRecordType;
        rowIndex: number;
        column: ColumnType<import("./components/interface").DefaultRecordType>;
        columnIndex: number;
    }) => Record<string, any>;
    showHeader: boolean;
    showSorterTooltip: boolean;
    locale: import("./components/interface").TableLocale;
    scroll: {
        x?: string | number;
        y?: string | number;
        scrollToFirstRowOnChange?: boolean;
    };
    rangeSelection: boolean | "single";
    copyDelimiter: string;
    summaryFixed: import("./components/interface").SummaryFixed;
    hasContextmenuPopup: boolean;
    onResizeColumn: (w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void;
    onRowDragEnd: (opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>;
    onColumnDragEnd: (opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>;
}, {}, string, import("./utils/type").CustomSlotsType<{
    emptyText?: any;
    headerCell?: {
        title: any;
        column: ColumnType<import("./components/interface").DefaultRecordType>;
    };
    bodyCell?: CellRenderArgs;
    title?: any;
    footer?: any;
    summary?: any;
    expandedRowRender?: {
        record: import("./components/interface").DefaultRecordType;
        index: number;
        indent: number;
        expanded: boolean;
    };
    customFilterDropdown?: any;
    customFilterIcon?: any;
    tooltipTitle?: CellRenderArgs;
    rowDragGhost?: import("./components/interface").RowDragGhostArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>;
    columnDragGhost?: import("./components/interface").ColumnDragGhostArg<ColumnType<import("./components/interface").DefaultRecordType>>;
    contextmenuPopup?: ContextmenuPopupArg<import("./components/interface").DefaultRecordType, ColumnType<import("./components/interface").DefaultRecordType>>;
    menuPopup?: import("./components/interface").MenuPopupArg<ColumnType<import("./components/interface").DefaultRecordType>>;
    menuIcon?: {
        column: ColumnType<import("./components/interface").DefaultRecordType>;
        filtered: boolean;
    };
    expandIcon?: any;
    cellEditor?: import("./components/interface").CellEditorArgs;
    default?: any;
}>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]> & {
    readonly SELECTION_ALL: typeof SELECTION_ALL;
    readonly SELECTION_INVERT: typeof SELECTION_INVERT;
    readonly SELECTION_NONE: typeof SELECTION_NONE;
    readonly version: string;
    readonly setLicenseKey: typeof setLicenseKey;
    readonly setConfig: typeof setConfig;
    readonly install: typeof install;
    readonly Column: typeof Column;
    readonly ColumnGroup: typeof ColumnGroup;
    readonly Summary: typeof Summary;
    readonly SummaryRow: typeof SummaryRow;
    readonly SummaryCell: typeof SummaryCell;
};
export default _default;
