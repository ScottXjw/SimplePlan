import type { ExtractPropTypes } from 'vue';
import type { CustomSlotsType } from '../utils/type';
import type { ContextSlots } from './context/TableSlotsContext';
import type { CellRenderArgs, ColumnDragGhostArg, ColumnType, ContextmenuPopupArg, DefaultRecordType, Key, RowDragGhostArg, SorterResult } from './interface';
declare const TableActions: ["paginate", "sort", "filter"];
export declare type TableAction = (typeof TableActions)[number];
export declare type FilterValue = (Key | boolean)[];
export interface ChangeEventInfo<RecordType> {
    pagination: {
        current?: number;
        pageSize?: number;
        total?: number;
    };
    filters: Record<string, FilterValue | null>;
    sorter: SorterResult<RecordType> | SorterResult<RecordType>[];
    currentDataSource: RecordType[];
    action: TableAction;
}
declare const props: {
    title: FunctionConstructor;
    footer: FunctionConstructor;
    ignoreCellKey: BooleanConstructor;
    showHeaderScrollbar: BooleanConstructor;
    prefixCls: StringConstructor;
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<DefaultRecordType>>;
        default: import("./interface").ColumnsType<DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<DefaultRecordType[]>;
        default: () => DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    xVirtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    autoHeaderHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: () => {};
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean | import("./interface").HeaderSticky;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<DefaultRecordType>>;
        default: any;
    };
    onExpand: {
        type: import("vue").PropType<(expanded: boolean, record: DefaultRecordType) => void>;
        default: any;
    };
    onExpandedRowsChange: {
        type: import("vue").PropType<(expandedKeys: Key[]) => void>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: {
                type: BooleanConstructor;
                default: any;
            };
            placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
            color: StringConstructor;
            transitionName: StringConstructor;
            overlayStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: import("vue").CSSProperties;
            };
            overlayClassName: StringConstructor;
            openClassName: StringConstructor;
            prefixCls: StringConstructor;
            mouseEnterDelay: NumberConstructor;
            mouseLeaveDelay: NumberConstructor;
            getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
            arrowPointAtCenter: {
                type: BooleanConstructor;
                default: any;
            };
            autoAdjustOverflow: {
                type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
            };
            destroyTooltipOnHide: {
                type: BooleanConstructor;
                default: any;
            };
            align: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
            };
            builtinPlacements: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
            };
            children: ArrayConstructor;
            onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
            'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
        }>>>;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rangeSelection: {
        type: import("vue").PropType<boolean | "single">;
        default: string;
    };
    copyDelimiter: {
        type: StringConstructor;
        default: string;
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<DefaultRecordType> | SorterResult<DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: import("vue").PropType<import("./interface").SummaryFixed>;
        default: boolean;
    };
    hasContextmenuPopup: BooleanConstructor;
    formatRangeCellText: {
        type: import("vue").PropType<(params: import("../hooks/RangeInterface").FormatRangeCellTextParams) => string>;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
    'onUpdate:dataSource': {
        type: import("vue").PropType<(dataSource: DefaultRecordType[]) => void>;
    };
};
export declare type TableProps = Partial<ExtractPropTypes<typeof props>>;
declare const _default: import("vue").DefineComponent<{
    title: FunctionConstructor;
    footer: FunctionConstructor;
    ignoreCellKey: BooleanConstructor;
    showHeaderScrollbar: BooleanConstructor;
    prefixCls: StringConstructor;
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<DefaultRecordType>>;
        default: import("./interface").ColumnsType<DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<DefaultRecordType[]>;
        default: () => DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    xVirtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    autoHeaderHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: () => {};
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean | import("./interface").HeaderSticky;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<DefaultRecordType>>;
        default: any;
    };
    onExpand: {
        type: import("vue").PropType<(expanded: boolean, record: DefaultRecordType) => void>;
        default: any;
    };
    onExpandedRowsChange: {
        type: import("vue").PropType<(expandedKeys: Key[]) => void>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: {
                type: BooleanConstructor;
                default: any;
            };
            placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
            color: StringConstructor;
            transitionName: StringConstructor;
            overlayStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: import("vue").CSSProperties;
            };
            overlayClassName: StringConstructor;
            openClassName: StringConstructor;
            prefixCls: StringConstructor;
            mouseEnterDelay: NumberConstructor;
            mouseLeaveDelay: NumberConstructor;
            getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
            arrowPointAtCenter: {
                type: BooleanConstructor;
                default: any;
            };
            autoAdjustOverflow: {
                type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
            };
            destroyTooltipOnHide: {
                type: BooleanConstructor;
                default: any;
            };
            align: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
            };
            builtinPlacements: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
            };
            children: ArrayConstructor;
            onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
            'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
        }>>>;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rangeSelection: {
        type: import("vue").PropType<boolean | "single">;
        default: string;
    };
    copyDelimiter: {
        type: StringConstructor;
        default: string;
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<DefaultRecordType> | SorterResult<DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: import("vue").PropType<import("./interface").SummaryFixed>;
        default: boolean;
    };
    hasContextmenuPopup: BooleanConstructor;
    formatRangeCellText: {
        type: import("vue").PropType<(params: import("../hooks/RangeInterface").FormatRangeCellTextParams) => string>;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
    'onUpdate:dataSource': {
        type: import("vue").PropType<(dataSource: DefaultRecordType[]) => void>;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "keydown"[], "keydown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    title: FunctionConstructor;
    footer: FunctionConstructor;
    ignoreCellKey: BooleanConstructor;
    showHeaderScrollbar: BooleanConstructor;
    prefixCls: StringConstructor;
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: any;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<DefaultRecordType>>;
        default: import("./interface").ColumnsType<DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<DefaultRecordType[]>;
        default: () => DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    xVirtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    autoHeaderHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: StringConstructor;
            spinning: {
                type: BooleanConstructor;
                default: any;
            };
            size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
            wrapperClassName: StringConstructor;
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: NumberConstructor;
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: () => {};
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean | import("./interface").HeaderSticky;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<DefaultRecordType>>;
        default: any;
    };
    onExpand: {
        type: import("vue").PropType<(expanded: boolean, record: DefaultRecordType) => void>;
        default: any;
    };
    onExpandedRowsChange: {
        type: import("vue").PropType<(expandedKeys: Key[]) => void>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: DefaultRecordType;
            rowIndex: number;
            column: ColumnType<DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            title: import("vue-types").VueTypeValidableDef<any>;
            trigger: import("vue").PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
            visible: {
                type: BooleanConstructor;
                default: any;
            };
            defaultVisible: {
                type: BooleanConstructor;
                default: any;
            };
            placement: import("vue").PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
            color: StringConstructor;
            transitionName: StringConstructor;
            overlayStyle: {
                type: import("vue").PropType<import("vue").CSSProperties>;
                default: import("vue").CSSProperties;
            };
            overlayClassName: StringConstructor;
            openClassName: StringConstructor;
            prefixCls: StringConstructor;
            mouseEnterDelay: NumberConstructor;
            mouseLeaveDelay: NumberConstructor;
            getPopupContainer: import("vue").PropType<(triggerNode: HTMLElement) => HTMLElement>;
            arrowPointAtCenter: {
                type: BooleanConstructor;
                default: any;
            };
            autoAdjustOverflow: {
                type: import("vue").PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
                default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
            };
            destroyTooltipOnHide: {
                type: BooleanConstructor;
                default: any;
            };
            align: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
                default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
            };
            builtinPlacements: {
                type: import("vue").PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
                default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
            };
            children: ArrayConstructor;
            onVisibleChange: import("vue").PropType<(vis: boolean) => void>;
            'onUpdate:visible': import("vue").PropType<(vis: boolean) => void>;
        }>>>;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rangeSelection: {
        type: import("vue").PropType<boolean | "single">;
        default: string;
    };
    copyDelimiter: {
        type: StringConstructor;
        default: string;
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<DefaultRecordType> | SorterResult<DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: import("vue").PropType<import("./interface").SummaryFixed>;
        default: boolean;
    };
    hasContextmenuPopup: BooleanConstructor;
    formatRangeCellText: {
        type: import("vue").PropType<(params: import("../hooks/RangeInterface").FormatRangeCellTextParams) => string>;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
    'onUpdate:dataSource': {
        type: import("vue").PropType<(dataSource: DefaultRecordType[]) => void>;
    };
}>> & {
    onKeydown?: (...args: any[]) => any;
}, {
    size: "middle" | "small" | "default";
    ignoreCellKey: boolean;
    showHeaderScrollbar: boolean;
    columnDrag: boolean;
    animateRows: boolean;
    dropdownPrefixCls: string;
    columns: import("./interface").ColumnsType<DefaultRecordType>;
    dataSource: DefaultRecordType[];
    virtual: boolean;
    xVirtual: boolean;
    rowHeight: import("./interface").RowHeight;
    autoHeaderHeight: boolean;
    bordered: boolean;
    wrapText: boolean;
    loading: boolean | Partial<ExtractPropTypes<{
        prefixCls: StringConstructor;
        spinning: {
            type: BooleanConstructor;
            default: any;
        };
        size: import("vue").PropType<import("ant-design-vue/es/spin/Spin").SpinSize>;
        wrapperClassName: StringConstructor;
        tip: import("vue-types").VueTypeValidableDef<any>;
        delay: NumberConstructor;
        indicator: import("vue-types").VueTypeValidableDef<any>;
    }>>;
    pagination: {};
    direction: "rtl";
    stripe: boolean;
    rowClassName: string | import("./interface").RowClassName<DefaultRecordType>;
    sticky: boolean | import("./interface").HeaderSticky;
    selectedRowKeys: Key[];
    expandFixed: import("./interface").FixedType;
    expandColumnWidth: number;
    expandedRowKeys: Key[];
    defaultExpandedRowKeys: Key[];
    expandedRowRender: import("./interface").ExpandedRowRender<DefaultRecordType>;
    expandRowByClick: boolean;
    expandIcon: import("./interface").RenderExpandIcon<DefaultRecordType>;
    onExpand: (expanded: boolean, record: DefaultRecordType) => void;
    onExpandedRowsChange: (expandedKeys: Key[]) => void;
    defaultExpandAllRows: boolean;
    childrenColumnName: string;
    rowExpandable: (record: DefaultRecordType) => boolean;
    rowSelection: any;
    rowHoverDelay: number;
    customRow: (data: DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
        style?: import("vue").CSSProperties;
    };
    customCell: (obj: {
        record: DefaultRecordType;
        rowIndex: number;
        column: ColumnType<DefaultRecordType>;
    }) => Record<string, any>;
    customHeaderCell: (column: ColumnType<DefaultRecordType>) => Record<string, any>;
    customSummaryCellProps: (obj: {
        record: DefaultRecordType;
        rowIndex: number;
        column: ColumnType<DefaultRecordType>;
        columnIndex: number;
    }) => Record<string, any>;
    showHeader: boolean;
    showSorterTooltip: boolean;
    locale: import("./interface").TableLocale;
    scroll: {
        x?: string | number;
        y?: string | number;
        scrollToFirstRowOnChange?: boolean;
    };
    rangeSelection: boolean | "single";
    copyDelimiter: string;
    summaryFixed: import("./interface").SummaryFixed;
    hasContextmenuPopup: boolean;
    onResizeColumn: (w: number, col: ColumnType<DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void;
    onRowDragEnd: (opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>;
    onColumnDragEnd: (opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>;
}, CustomSlotsType<{
    emptyText?: any;
    headerCell?: {
        title: any;
        column: ColumnType;
    };
    bodyCell?: CellRenderArgs;
    title?: any;
    footer?: any;
    summary?: any;
    expandedRowRender?: Parameters<ContextSlots['expandedRowRender']>[0];
    customFilterDropdown?: any;
    customFilterIcon?: any;
    tooltipTitle?: CellRenderArgs;
    rowDragGhost?: RowDragGhostArg<DefaultRecordType, ColumnType>;
    columnDragGhost?: ColumnDragGhostArg<ColumnType>;
    contextmenuPopup?: ContextmenuPopupArg<DefaultRecordType, ColumnType>;
    menuPopup?: Parameters<ContextSlots['menuPopup']>[0];
    menuIcon?: Parameters<ContextSlots['menuIcon']>[0];
    expandIcon?: Parameters<ContextSlots['expandIcon']>[0];
    cellEditor?: Parameters<ContextSlots['cellEditor']>[0];
    default?: any;
}>>;
export default _default;
