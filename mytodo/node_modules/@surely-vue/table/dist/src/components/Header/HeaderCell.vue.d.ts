import type { CSSProperties, PropType } from 'vue';
import { h } from 'vue';
import type { FinallyColumnType, Key, SortOrder } from '../interface';
declare const _default: import("vue").DefineComponent<{
    component: {
        type: StringConstructor;
        default: string;
    };
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
    additionalProps: ObjectConstructor;
}, {
    tableContext: import("../context/TableContext").TableContextProps;
    sorterInfo: import("vue").ComputedRef<{
        columnKey: Key;
        sorterState: import("../../hooks/useSorter").SortState<any>;
        sorterOrder: SortOrder;
        sortDirections: SortOrder[];
        nextSortOrder: SortOrder;
        tip: string;
        showFilter: boolean;
        wrapText: boolean;
    }>;
    handleSortClick: (column: FinallyColumnType<any>, nextSortOrder: SortOrder) => void;
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean | SortOrder | import("../interface").CompareFn<import("../interface").DefaultRecordType> | {
            compare?: import("../interface").CompareFn<import("../interface").DefaultRecordType>;
            multiple?: number;
        };
    }>;
    widths: import("vue").ComputedRef<{
        width: number;
        left: number;
        minWidth: number;
        maxWidth: number;
    }>;
    colProps: import("vue").ComputedRef<Record<string, any> & {
        colspan: number;
        colstart: number;
        colend: number;
    }>;
    RenderSlot: import("vue").FunctionalComponent<any, {}, any>;
    titleClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    domRef: import("vue").Ref<HTMLDivElement>;
    autoHeight: boolean;
    componentStyle: import("vue").ComputedRef<CSSProperties>;
    headerContext: import("../context/HeaderContext").HeaderContextProps;
    tableSlotsContext: import("../context/TableSlotsContext").ContextSlots;
    cellBoxClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    showPopupContent: import("vue").ShallowRef<(...args: any[]) => void>;
    FilterItems: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }, {}>;
    h: typeof h;
    hasIcon: import("vue").ComputedRef<boolean>;
    menuFilterProps: import("vue").ComputedRef<{
        prefixCls: string;
        setSelectedKeys: (selectedKeys: Key[]) => void;
        selectedKeysRef: import("vue").Ref<Key[]>;
        confirm: () => void;
        clearFilters: () => void;
        filters: import("../interface").ColumnFilterItem[];
    }>;
    filtered: import("vue").ComputedRef<boolean>;
    tooltipProps: import("vue").ComputedRef<Partial<import("vue").ExtractPropTypes<{
        title: import("vue-types").VueTypeValidableDef<any>;
        trigger: PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: {
            type: BooleanConstructor;
            default: any;
        };
        placement: PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
        color: StringConstructor;
        transitionName: StringConstructor;
        overlayStyle: {
            type: PropType<CSSProperties>;
            default: CSSProperties;
        };
        overlayClassName: StringConstructor;
        openClassName: StringConstructor;
        prefixCls: StringConstructor;
        mouseEnterDelay: NumberConstructor;
        mouseLeaveDelay: NumberConstructor;
        getPopupContainer: PropType<(triggerNode: HTMLElement) => HTMLElement>;
        arrowPointAtCenter: {
            type: BooleanConstructor;
            default: any;
        };
        autoAdjustOverflow: {
            type: PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
            default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
        };
        destroyTooltipOnHide: {
            type: BooleanConstructor;
            default: any;
        };
        align: {
            type: PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
            default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
        };
        builtinPlacements: {
            type: PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
            default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
        };
        children: ArrayConstructor;
        onVisibleChange: PropType<(vis: boolean) => void>;
        'onUpdate:visible': PropType<(vis: boolean) => void>;
    }>>>;
    showSorterTooltip: import("vue").ComputedRef<boolean | Partial<import("vue").ExtractPropTypes<{
        title: import("vue-types").VueTypeValidableDef<any>;
        trigger: PropType<import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType | import("ant-design-vue/es/tooltip/abstractTooltipProps").TriggerType[]>;
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: {
            type: BooleanConstructor;
            default: any;
        };
        placement: PropType<import("ant-design-vue/es/tooltip").TooltipPlacement>;
        color: StringConstructor;
        transitionName: StringConstructor;
        overlayStyle: {
            type: PropType<CSSProperties>;
            default: CSSProperties;
        };
        overlayClassName: StringConstructor;
        openClassName: StringConstructor;
        prefixCls: StringConstructor;
        mouseEnterDelay: NumberConstructor;
        mouseLeaveDelay: NumberConstructor;
        getPopupContainer: PropType<(triggerNode: HTMLElement) => HTMLElement>;
        arrowPointAtCenter: {
            type: BooleanConstructor;
            default: any;
        };
        autoAdjustOverflow: {
            type: PropType<boolean | import("ant-design-vue/es/tooltip").AdjustOverflow>;
            default: boolean | import("ant-design-vue/es/tooltip").AdjustOverflow;
        };
        destroyTooltipOnHide: {
            type: BooleanConstructor;
            default: any;
        };
        align: {
            type: PropType<import("ant-design-vue/es/vc-trigger/interface").AlignType>;
            default: import("ant-design-vue/es/vc-trigger/interface").AlignType;
        };
        builtinPlacements: {
            type: PropType<import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements>;
            default: import("ant-design-vue/es/vc-trigger/interface").BuildInPlacements;
        };
        children: ArrayConstructor;
        onVisibleChange: PropType<(vis: boolean) => void>;
        'onUpdate:visible': PropType<(vis: boolean) => void>;
    }>>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    component: {
        type: StringConstructor;
        default: string;
    };
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
    additionalProps: ObjectConstructor;
}>>, {
    component: string;
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
    wrapText: boolean;
    level: number;
}, {}>;
export default _default;
