import type { CSSProperties, PropType } from 'vue';
import { h } from 'vue';
import type { FinallyColumnType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    component: {
        type: StringConstructor;
        default: string;
    };
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => void;
    };
    additionalProps: ObjectConstructor;
}, {
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    componentStyle: import("vue").ComputedRef<CSSProperties>;
    getPopupContainer: import("vue").ComputedRef<import("../interface").GetPopupContainer>;
    rowSelectionType: import("vue").ComputedRef<import("../interface").RowSelectionType>;
    hideSelectAll: import("vue").ComputedRef<boolean>;
    onSelectAllChange: () => void;
    checked: import("vue").ComputedRef<boolean>;
    indeterminate: import("vue").ComputedRef<boolean>;
    disabled: import("vue").ComputedRef<boolean>;
    mergedSelections: import("vue").Ref<import("../interface").SelectionItem[]>;
    onMenuClick: (callback: any) => void;
    autoHeight: boolean;
    title: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>>;
    h: typeof h;
    Fragment: {
        new (): {
            $props: import("vue").VNodeProps;
        };
        __isFragment: true;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    component: {
        type: StringConstructor;
        default: string;
    };
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => void;
    };
    additionalProps: ObjectConstructor;
}>>, {
    component: string;
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
}, {}>;
export default _default;
