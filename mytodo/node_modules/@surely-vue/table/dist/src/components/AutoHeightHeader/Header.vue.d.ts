import type { CSSProperties, PropType } from 'vue';
import type { HeaderSticky } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    sticky: {
        type: PropType<boolean | HeaderSticky>;
        default: boolean | HeaderSticky;
    };
}, {
    headerClass: import("vue").ComputedRef<{
        [x: string]: boolean | HeaderSticky;
    }>;
    viewportClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    columnRows: import("vue").ComputedRef<import("../interface").HeaderCellType[][]>;
    viewportStyle: import("vue").ComputedRef<CSSProperties>;
    scrollbarStyle: import("vue").ComputedRef<CSSProperties>;
    headerStyle: import("vue").ComputedRef<CSSProperties>;
    headerRef: import("vue").Ref<HTMLDivElement>;
    dragColumnPlaceholderRef: import("vue").Ref<HTMLSpanElement>;
    viewportRef: import("vue").Ref<HTMLDivElement>;
    maxHeaderHeight: import("vue").Ref<number>;
    handleResize: (e: CustomEvent) => void;
    shadowRightStyle: import("vue").ComputedRef<CSSProperties>;
    shadowLeftStyle: import("vue").ComputedRef<CSSProperties>;
    showHeaderScrollbar: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scrollLeft" | "resizeheight")[], "scrollLeft" | "resizeheight", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    sticky: {
        type: PropType<boolean | HeaderSticky>;
        default: boolean | HeaderSticky;
    };
}>> & {
    onScrollLeft?: (...args: any[]) => any;
    onResizeheight?: (...args: any[]) => any;
}, {
    wrapText: boolean;
    sticky: boolean | HeaderSticky;
}, {}>;
export default _default;
