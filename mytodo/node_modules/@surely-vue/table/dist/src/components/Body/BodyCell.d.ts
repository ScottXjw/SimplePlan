import type { ExtractPropTypes, FunctionalComponent, PropType } from 'vue';
import type { InnerKeydownPayload, RangeCell } from '../../hooks/RangeInterface';
import type { FinallyColumnType, RowType } from '../interface';
declare const cellProps: {
    prefixCls: StringConstructor;
    rowIndex: {
        type: NumberConstructor;
        required: boolean;
    };
    flattenRowIndex: {
        type: NumberConstructor;
        required: boolean;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    item: {
        type: PropType<any>;
        default: () => {};
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<RowType>;
    };
    height: {
        tyoe: NumberConstructor;
        default: any;
    };
    hasAppendNode: BooleanConstructor;
    resizeObserver: {
        type: PropType<ResizeObserver>;
    };
    calMaxHeight: FunctionConstructor;
    tooltipOpen: BooleanConstructor;
    getPopupContainer: PropType<() => HTMLElement>;
    onCellLeave: FunctionConstructor;
    editCellKeys: PropType<string[]>;
    onOpenEditor: FunctionConstructor;
    onCloseEditor: FunctionConstructor;
    onMousedown: PropType<(e: MouseEvent, cellPosition: RangeCell) => void>;
    onMousemove: PropType<(e: MouseEvent, cellPosition: RangeCell) => void>;
    onKeydown: PropType<(e: KeyboardEvent, payload: InnerKeydownPayload) => void>;
    onClick: PropType<(e: MouseEvent, cellPosition: RangeCell) => void>;
};
declare type CellProps = Partial<ExtractPropTypes<typeof cellProps>>;
declare const BodyCell: FunctionalComponent<CellProps>;
export default BodyCell;
