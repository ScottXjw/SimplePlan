import type { PropType } from 'vue';
import type { FinallyColumnType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: {
        type: StringConstructor;
    };
    recordIndexs: {
        type: PropType<number[]>;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    record: {
        type: PropType<any>;
        default: () => {};
    };
    value: {
        validator: () => boolean;
    };
    customEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: PropType<() => HTMLElement>;
    onCloseEditor: FunctionConstructor;
    onKeydown: PropType<(e: KeyboardEvent) => void>;
}, {
    modelValue: import("vue").Ref<unknown>;
    inputRef: any;
    handleInput: (e: Event) => void;
    handleKeyDown: (e: KeyboardEvent) => void;
    handleBlur: () => void;
    tableSlots: import("../context/TableSlotsContext").ContextSlots;
    popup: import("../context/PopupContext").PopupContextProps;
    save: () => void;
    closeEditor: () => void;
    getCustomEditorProps: () => {
        modelValue: import("vue").Ref<unknown>;
        save: () => void;
        onInput: (e: Event, val: any) => void;
        closeEditor: () => void;
        column: import("../interface").ColumnType<import("../interface").DefaultRecordType> | import("../interface").ColumnGroupType<import("../interface").DefaultRecordType>;
        editorRef: any;
        getPopupContainer: () => HTMLElement;
        record: any;
        recordIndexs: number[];
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("closeEditor" | "keydown")[], "closeEditor" | "keydown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
    };
    recordIndexs: {
        type: PropType<number[]>;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    record: {
        type: PropType<any>;
        default: () => {};
    };
    value: {
        validator: () => boolean;
    };
    customEditable: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: PropType<() => HTMLElement>;
    onCloseEditor: FunctionConstructor;
    onKeydown: PropType<(e: KeyboardEvent) => void>;
}>> & {
    onCloseEditor?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
}, {
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
    record: any;
    customEditable: boolean;
    multiple: boolean;
    autoHeight: boolean;
}, {}>;
export default _default;
