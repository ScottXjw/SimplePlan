import type { CSSProperties, PropType } from 'vue';
import type { SummaryFixed } from '../interface';
import type { CustomSlotsType } from '../../utils/type';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    bodyScrollWidth: {
        type: NumberConstructor;
    };
    bodyWidth: {
        type: NumberConstructor;
    };
    bodyHeight: NumberConstructor;
    height: {
        type: PropType<string | number>;
    };
    scrollX: (StringConstructor | NumberConstructor)[];
    summaryFixed: PropType<SummaryFixed>;
    emptyText: FunctionConstructor;
    summary: FunctionConstructor;
}, {
    bodyContainerStyle: import("vue").ComputedRef<CSSProperties>;
    measureDomStyle: import("vue").ComputedRef<any>;
    isEmpty: import("vue").ComputedRef<boolean>;
    emptyStyle: import("vue").ComputedRef<{
        width: string;
    }>;
    handleEmptyHeight: (e: CustomEvent) => void;
    bodyClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    fixLeftClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    fixRightClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    centerClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    containerClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    summaryViewportClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    summaryClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    rightStyle: import("vue").ComputedRef<CSSProperties>;
    centerStyle: import("vue").ComputedRef<{
        height: string;
    }>;
    leftStyle: import("vue").ComputedRef<CSSProperties>;
    summaryViewportStyle: import("vue").ComputedRef<{
        height: string;
    }>;
    containerStyle: import("vue").ComputedRef<CSSProperties>;
    summaryStyle: import("vue").ComputedRef<CSSProperties & ({
        borderTop: string;
        position?: undefined;
        bottom?: undefined;
        width?: undefined;
    } | {
        borderTop?: undefined;
        position?: undefined;
        bottom?: undefined;
        width?: undefined;
    } | {
        position: string;
        bottom: number;
        width: string;
        borderTop: string;
    })>;
    viewportHeight: import("vue").ComputedRef<number>;
    leftColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    centerColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    rightColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    bodyInnerWidth: import("vue").Ref<number>;
    handleBodyInnerResize: (e: CustomEvent) => void;
    handleBodyScrollResize: (e: CustomEvent) => void;
    bodyRef: import("vue").Ref<HTMLDivElement>;
    bodyInnerRef: import("vue").Ref<HTMLDivElement>;
    viewportRef: import("vue").Ref<HTMLDivElement>;
    summaryViewportRef: import("vue").Ref<HTMLDivElement>;
    handleResize: (e: CustomEvent) => void;
    bodyStyle: import("vue").ComputedRef<any>;
    handleBodyResize: (e: CustomEvent) => void;
    emptyImage: any;
    scrollLayerStyle: import("vue").ComputedRef<{
        height: string;
        width: string;
        minWidth: string;
    }>;
    getRowClassName: (record: any, index: number) => string;
    showWatermark: import("vue").ComputedRef<boolean>;
    leftPopupContainer: import("vue").Ref<HTMLDivElement>;
    centerPopupContainer: import("vue").Ref<HTMLDivElement>;
    rightPopupContainer: import("vue").Ref<HTMLDivElement>;
    dragRowPlaceholderRef: import("vue").Ref<HTMLSpanElement>;
    leftShadowStyle: import("vue").ComputedRef<CSSProperties>;
    rightShadowStyle: import("vue").ComputedRef<CSSProperties>;
    fixedSummaryClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    scrollLayerRef: import("vue").Ref<HTMLDivElement>;
    scrollbarStyle: import("vue").ComputedRef<CSSProperties>;
    topSummaryStyle: import("vue").ComputedRef<CSSProperties>;
    leftTarget: import("vue").Ref<HTMLDivElement>;
    centerTarget: import("vue").Ref<HTMLDivElement>;
    rightTarget: import("vue").Ref<HTMLDivElement>;
    popupContent: import("vue").ShallowRef<any>;
    popupContentPos: import("vue").Ref<string>;
    handleContextmenuPopupResize: () => void;
    handleDragStart: (event: MouseEvent) => boolean;
    handleKeydown: (event: KeyboardEvent) => void;
    bodyViewportStyle: import("vue").ComputedRef<CSSProperties>;
    bodyViewportRef: import("vue").Ref<HTMLDivElement>;
    bodyContainerRef: import("vue").Ref<HTMLDivElement>;
    rowsHeightStyle: import("vue").ComputedRef<{
        height: string;
        overflow: string;
        transform: string;
    }>;
    showYScrollbar: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "scrollLeft" | "scrollTop" | "update:bodyWidth" | "update:bodyHeight" | "update:bodyScrollWidth" | "keydown")[], "scroll" | "scrollLeft" | "scrollTop" | "update:bodyWidth" | "update:bodyHeight" | "update:bodyScrollWidth" | "keydown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    bodyScrollWidth: {
        type: NumberConstructor;
    };
    bodyWidth: {
        type: NumberConstructor;
    };
    bodyHeight: NumberConstructor;
    height: {
        type: PropType<string | number>;
    };
    scrollX: (StringConstructor | NumberConstructor)[];
    summaryFixed: PropType<SummaryFixed>;
    emptyText: FunctionConstructor;
    summary: FunctionConstructor;
}>> & {
    onScroll?: (...args: any[]) => any;
    onScrollLeft?: (...args: any[]) => any;
    onScrollTop?: (...args: any[]) => any;
    "onUpdate:bodyWidth"?: (...args: any[]) => any;
    "onUpdate:bodyHeight"?: (...args: any[]) => any;
    "onUpdate:bodyScrollWidth"?: (...args: any[]) => any;
    onKeydown?: (...args: any[]) => any;
}, {
    wrapText: boolean;
}, CustomSlotsType<{
    emptyText: any;
    default: any;
}>>;
export default _default;
