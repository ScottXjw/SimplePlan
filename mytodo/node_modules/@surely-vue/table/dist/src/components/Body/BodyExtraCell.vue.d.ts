import type { PropType } from 'vue';
import type { FinallyColumnType, Key, RowType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    rowIndex: {
        type: NumberConstructor;
        required: true;
    };
    type: {
        type: PropType<RowType>;
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => void;
    };
    record: {
        type: ObjectConstructor;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    expanded: BooleanConstructor;
    supportExpand: BooleanConstructor;
}, {
    handleRadioChange: (event: any) => void;
    handleCheckboxChange: (e: any) => void;
    onInternalTriggerExpand: (record: any, event: any) => void;
    rowSelectionType: import("vue").ComputedRef<import("../interface").RowSelectionType>;
    keySet: import("vue").ComputedRef<Set<Key>>;
    checked: import("vue").Ref<boolean>;
    mergedIndeterminate: import("vue").Ref<boolean>;
    checkboxProps: import("vue").ComputedRef<Partial<Partial<import("vue").ExtractPropTypes<{
        prefixCls: StringConstructor;
        disabled: BooleanConstructor;
        tabindex: (StringConstructor | NumberConstructor)[];
        name: StringConstructor;
        id: StringConstructor;
        style: {
            type: PropType<import("vue").CSSProperties>;
            default: import("vue").CSSProperties;
        };
        class: StringConstructor;
        checked: BooleanConstructor;
        indeterminate: BooleanConstructor;
        ariaLabel: StringConstructor;
    }>>>>;
    mergedCellProps: import("vue").ComputedRef<import("../interface").CellType & {
        style: import("vue").CSSProperties & {
            width: string;
        };
    }>;
    onBodyCellContextmenu: (event: MouseEvent, args: Partial<import("../interface").CellRenderArgs>, type: RowType) => void;
    contextmenuProps: import("vue").ComputedRef<{
        record: Record<string, any>;
        column: import("../interface").ColumnType<import("../interface").DefaultRecordType> | import("../interface").ColumnGroupType<import("../interface").DefaultRecordType>;
        index: number;
        recordIndexs: number[];
        key: string | number;
    }>;
    level: number;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    rowIndex: {
        type: NumberConstructor;
        required: true;
    };
    type: {
        type: PropType<RowType>;
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => void;
    };
    record: {
        type: ObjectConstructor;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    expanded: BooleanConstructor;
    supportExpand: BooleanConstructor;
}>>, {
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
    expanded: boolean;
    supportExpand: boolean;
}, {}>;
export default _default;
