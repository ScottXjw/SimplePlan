import type { InjectionKey, PropType } from 'vue';
import type { CellEditorArgs, CellRenderArgs, ColumnDragGhostArg, ColumnType, ContextmenuPopupArg, DefaultRecordType, ExpandedRowRender, MenuPopupArg, RowDragGhostArg } from '../interface';
export declare type ContextSlots = {
    emptyText?: () => any;
    expandIcon?: (...args: any[]) => any;
    title?: () => any;
    footer?: () => any;
    summary?: (...args: any[]) => any;
    bodyCell?: (args: CellRenderArgs) => any;
    headerCell?: (opt: {
        title: any;
        column: ColumnType;
    }) => any;
    customFilterIcon?: (...args: any[]) => any;
    customFilterDropdown?: (...args: any[]) => any;
    tooltipTitle?: (args: CellRenderArgs) => any;
    rowDragGhost?: (arg: RowDragGhostArg<DefaultRecordType, ColumnType>) => any;
    columnDragGhost?: (arg: ColumnDragGhostArg<ColumnType>) => any;
    contextmenuPopup?: (arg: ContextmenuPopupArg<DefaultRecordType, ColumnType>) => any;
    menuPopup?: (arg: MenuPopupArg<ColumnType>) => any;
    menuIcon?: (arg: {
        column: ColumnType;
        filtered: boolean;
    }) => any;
    cellEditor?: (arg: CellEditorArgs) => any;
    expandedRowRender?: ExpandedRowRender<DefaultRecordType>;
    [key: string]: ((...args: any[]) => any) | undefined;
};
export declare const ContextKey: InjectionKey<ContextSlots>;
export declare const useInjectSlots: () => ContextSlots;
export declare const TableSlotsContextProvider: import("vue").DefineComponent<{
    value: {
        type: PropType<ContextSlots>;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: PropType<ContextSlots>;
    };
}>>, {}, {}>;
