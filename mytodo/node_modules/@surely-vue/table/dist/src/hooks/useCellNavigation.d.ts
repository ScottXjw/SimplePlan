import type { ComputedRef, Ref, ShallowRef } from 'vue';
import type { DefaultRecordType, FinallyColumnType, RenderedCell } from '../components/interface';
import type { RangeCell } from './RangeInterface';
export declare const useCellNavigation: (params: {
    getDisplayedColBefore: (col: FinallyColumnType<DefaultRecordType>) => FinallyColumnType<DefaultRecordType>;
    getDisplayedColAfter: (col: FinallyColumnType<DefaultRecordType>) => FinallyColumnType<DefaultRecordType>;
    allDisplayedColumns: ComputedRef<FinallyColumnType<DefaultRecordType>[]>;
    setRangeToCell: (cell: RangeCell, appendRange?: boolean) => void;
    focusCell: (cell: RangeCell) => void;
    ensureCellVisible: (cell: RangeCell) => void;
    allColumns: ShallowRef<FinallyColumnType<DefaultRecordType>[]>;
    flattenData: ShallowRef<DefaultRecordType[]>;
    prefixCls: ComputedRef<string>;
    rangeSelection: ComputedRef<boolean | 'single'>;
    getRowByFlattenIndex: (index: number) => DefaultRecordType;
    rootRef: Ref<HTMLDivElement>;
    allCellProps: Ref<Record<string, Record<string, RenderedCell>>>;
    tabGuardTopRef: Ref<HTMLDivElement>;
    tabGuardBottomRef: Ref<HTMLDivElement>;
}) => {
    getNextCellToFocus: (keyCode: number, focusedCell: RangeCell, ctrlPressed?: boolean) => RangeCell | {
        rowIndex: any;
        rowPinned: any;
        column: any;
    };
    getNextTabbedCell: (gridCell: RangeCell, backwards: boolean) => {
        rowIndex: number;
        column: FinallyColumnType<DefaultRecordType>;
        rowPinned: import("./RangeInterface").RowPinned;
    };
    getLastBodyCell: () => {
        rowIndex: any;
        rowPinned: any;
    };
    navigateToNextCell: (event: KeyboardEvent, currentCell: RangeCell) => void;
    onTabKeyDown: (previous: RangeCell, keyboardEvent: KeyboardEvent) => void;
    tabToNextCellCommon: (previous: RangeCell, backwards: boolean) => boolean;
    getFirstCellToFocus: (backwards: boolean) => void;
    getLastCellToFocus: (backwards: boolean) => void;
    getRowAbove: (rowPosition: RangeCell) => {
        rowIndex: number;
        rowPinned: import("./RangeInterface").RowPinned;
    };
    getCellAbove: (lastCell: RangeCell) => {
        rowIndex: number;
        column: FinallyColumnType<DefaultRecordType>;
        rowPinned: import("./RangeInterface").RowPinned;
    };
    getRowBelow: (rowPosition: RangeCell) => {
        rowIndex: number;
        rowPinned: import("./RangeInterface").RowPinned;
    };
};
