import type { ComputedRef, Ref, ShallowRef } from 'vue';
import type { ColumnsType, ExpandType, FinallyColumnType, HeaderCellType, Key, StickyOffsets, SurelyTableProps } from '../components/interface';
import type { RangeCell } from './RangeInterface';
export declare const CheckboxColumnKey = "__Internal__Checkbox__Columnkey";
export declare const ExpandColumnKey = "__Internal__Expand__Columnkey";
export interface UseColumnsType {
    leftColumns: ShallowRef<FinallyColumnType[]>;
    rightColumns: ShallowRef<FinallyColumnType[]>;
    centerColumns: ShallowRef<FinallyColumnType[]>;
    allColumns: ShallowRef<FinallyColumnType[]>;
    visibleCenterColumns: ShallowRef<FinallyColumnType[]>;
    visibleCenterHeaderColumns: ShallowRef<FinallyColumnType[]>;
    leftWidth: Ref<number>;
    rightWidth: Ref<number>;
    centerWidth: Ref<number>;
    bodyMaxWidth: ComputedRef<number>;
    leftHeaderColumns: ShallowRef<FinallyColumnType[]>;
    rightHeaderColumns: ShallowRef<FinallyColumnType[]>;
    centerHeaderColumns: ShallowRef<FinallyColumnType[]>;
    maxRowSpan: Ref<number>;
    headerHeight: ShallowRef<number[]>;
    maxHeaderHeight: Ref<number>;
    getColumnPosition: (_index: number, _colSpan?: number) => {
        width: number;
        left: number;
        minWidth: number;
        maxWidth: number;
    };
    getColumnPositionByKey: (_key: Key) => {
        width: number;
        left: number;
        minWidth: number;
        maxWidth: number;
    } | undefined;
    columnKeyIndexMap: ShallowRef<Record<string, number>>;
    expandIconColumnIndex: Ref<number>;
    columnRowsForAutoHeaderHeight: ShallowRef<HeaderCellType[][]>;
    stickyOffsets: ShallowRef<StickyOffsets>;
}
export declare const defaultMinWidth = 50;
export default function useColumns({ props, rawColumns, bodyScrollWidth, baseHeight, measureWidthRef, expandType, expandable, scrollLeft, bodyWidth, xVirtual, draggingColumnKey, latestRangeStartCell, }: {
    props: SurelyTableProps;
    rawColumns: Ref<ColumnsType>;
    bodyScrollWidth: Ref<number>;
    baseHeight: Ref<number>;
    measureWidthRef: Ref<any>;
    expandable: Ref<boolean>;
    rowExpandable?: Ref<(_record: any) => boolean>;
    direction?: Ref<'ltr' | 'rtl'>;
    expandType: Ref<ExpandType>;
    scrollLeft: Ref<number>;
    bodyWidth: Ref<number>;
    xVirtual: Ref<boolean>;
    draggingColumnKey: Ref<Key>;
    latestRangeStartCell: ShallowRef<RangeCell>;
}): UseColumnsType;
